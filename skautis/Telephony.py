# -*- coding: utf-8 -*-

import zeep

# Skautská telefonní síť
class Telephony(object):
    __module__ = 'skautis'

    def __init__(self, test):
        if test:
            self._client = zeep.Client('https://test-is.skaut.cz/JunakWebservice/Telephony.asmx?wsdl')
        else:
            self._client = zeep.Client('https://is.skaut.cz/JunakWebservice/Telephony.asmx?wsdl')

    # Zamítnout žádost o prodloužení smlouvy (Administrátor STS)
    def RequestRenewalUpdateDisapproveAdmin(self, ID_Login, ID, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_PersonFinished, DateFinished, ID_Person, EnrollNumber=None, ID_RequestRenewalState=None, RequestRenewalState=None, Tariff=None, PersonCreate=None, PersonDecision=None, PersonFinished=None, StateDecision=None, Person=None):
        return self._client.service.RequestRenewalUpdateDisapproveAdmin({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_PersonFinished": ID_PersonFinished, "DateFinished": DateFinished, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestRenewalState": ID_RequestRenewalState, "RequestRenewalState": RequestRenewalState, "Tariff": Tariff, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "PersonFinished": PersonFinished, "StateDecision": StateDecision, "Person": Person})

    # Schválit žádost o prodloužení smlouvy (Administrátor STS)
    def RequestRenewalUpdateApproveAdmin(self, ID_Login, ID, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_PersonFinished, DateFinished, ID_Person, EnrollNumber=None, ID_RequestRenewalState=None, RequestRenewalState=None, Tariff=None, PersonCreate=None, PersonDecision=None, PersonFinished=None, StateDecision=None, Person=None):
        return self._client.service.RequestRenewalUpdateApproveAdmin({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_PersonFinished": ID_PersonFinished, "DateFinished": DateFinished, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestRenewalState": ID_RequestRenewalState, "RequestRenewalState": RequestRenewalState, "Tariff": Tariff, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "PersonFinished": PersonFinished, "StateDecision": StateDecision, "Person": Person})

    # Zamítnout žádost o prodloužení smlouvy (PO)
    def RequestRenewalUpdateDisapproveAgent(self, ID_Login, ID, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_PersonFinished, DateFinished, ID_Person, EnrollNumber=None, ID_RequestRenewalState=None, RequestRenewalState=None, Tariff=None, PersonCreate=None, PersonDecision=None, PersonFinished=None, StateDecision=None, Person=None):
        return self._client.service.RequestRenewalUpdateDisapproveAgent({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_PersonFinished": ID_PersonFinished, "DateFinished": DateFinished, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestRenewalState": ID_RequestRenewalState, "RequestRenewalState": RequestRenewalState, "Tariff": Tariff, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "PersonFinished": PersonFinished, "StateDecision": StateDecision, "Person": Person})

    # Schválit žádost o prodloužení smlouvy (PO)
    def RequestRenewalUpdateApproveAgent(self, ID_Login, ID, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_PersonFinished, DateFinished, ID_Person, EnrollNumber=None, ID_RequestRenewalState=None, RequestRenewalState=None, Tariff=None, PersonCreate=None, PersonDecision=None, PersonFinished=None, StateDecision=None, Person=None):
        return self._client.service.RequestRenewalUpdateApproveAgent({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_PersonFinished": ID_PersonFinished, "DateFinished": DateFinished, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestRenewalState": ID_RequestRenewalState, "RequestRenewalState": RequestRenewalState, "Tariff": Tariff, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "PersonFinished": PersonFinished, "StateDecision": StateDecision, "Person": Person})

    # Načíst seznam žádostí o prodloužení smlouvy jednotky
    def RequestRenewalAllUnit(self, ID_Login, ID_Unit, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, ID_PersonDecision, ID_PersonFinished, InProcess, ID_RequestRenewalState=None):
        return self._client.service.RequestRenewalAllUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "ID_PersonDecision": ID_PersonDecision, "ID_PersonFinished": ID_PersonFinished, "InProcess": InProcess, "ID_RequestRenewalState": ID_RequestRenewalState})

    # Stáhnout protokol o krádeži
    def RequestBlockingProtocol(self, ID_Login, ID):
        return self._client.service.RequestBlockingProtocol({"ID_Login": ID_Login, "ID": ID})

    # Načíst seznam žádostí o blokaci SIM
    def RequestBlockingAll(self, ID_Login, ID_EnrollNumber, ID_PersonCreate, ID_PersonBlocked, ID_RequestBlockingState=None, ID_RequestBlockingReason=None):
        return self._client.service.RequestBlockingAll({"ID_Login": ID_Login, "ID_EnrollNumber": ID_EnrollNumber, "ID_PersonCreate": ID_PersonCreate, "ID_PersonBlocked": ID_PersonBlocked, "ID_RequestBlockingState": ID_RequestBlockingState, "ID_RequestBlockingReason": ID_RequestBlockingReason})

    # Načíst detail žádosti o blokaci SIM
    def RequestBlockingDetail(self, ID_Login, ID):
        return self._client.service.RequestBlockingDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit žádost o blokaci SIM
    def RequestBlockingInsert(self, ID_Login, ID, ID_EnrollNumber, ID_PersonCreate, DateCreate, ID_PersonBlocked, DateBlocked, ID_Person, EnrollNumber=None, ID_RequestBlockingState=None, RequestBlockingState=None, ID_RequestBlockingReason=None, RequestBlockingReason=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, PersonCreate=None, PersonBlocked=None, Person=None, ProtocolExtension=None, ProtocolContent=None, BlockingPassword=None):
        return self._client.service.RequestBlockingInsert({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonBlocked": ID_PersonBlocked, "DateBlocked": DateBlocked, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestBlockingState": ID_RequestBlockingState, "RequestBlockingState": RequestBlockingState, "ID_RequestBlockingReason": ID_RequestBlockingReason, "RequestBlockingReason": RequestBlockingReason, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "PersonCreate": PersonCreate, "PersonBlocked": PersonBlocked, "Person": Person, "ProtocolExtension": ProtocolExtension, "ProtocolContent": ProtocolContent, "BlockingPassword": BlockingPassword})

    # Načíst seznam důvodů zablokování SIM
    def RequestBlockingReasonAll(self, ID_Login, DisplayName=None):
        return self._client.service.RequestBlockingReasonAll({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Upravit žádost o blokaci SIM
    def RequestBlockingUpdate(self, ID_Login, ID, ID_EnrollNumber, ID_PersonCreate, DateCreate, ID_PersonBlocked, DateBlocked, ID_Person, EnrollNumber=None, ID_RequestBlockingState=None, RequestBlockingState=None, ID_RequestBlockingReason=None, RequestBlockingReason=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, PersonCreate=None, PersonBlocked=None, Person=None, ProtocolExtension=None, ProtocolContent=None, BlockingPassword=None):
        return self._client.service.RequestBlockingUpdate({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonBlocked": ID_PersonBlocked, "DateBlocked": DateBlocked, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestBlockingState": ID_RequestBlockingState, "RequestBlockingState": RequestBlockingState, "ID_RequestBlockingReason": ID_RequestBlockingReason, "RequestBlockingReason": RequestBlockingReason, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "PersonCreate": PersonCreate, "PersonBlocked": PersonBlocked, "Person": Person, "ProtocolExtension": ProtocolExtension, "ProtocolContent": ProtocolContent, "BlockingPassword": BlockingPassword})

    # Založit žádost o převod osoby z jiné OJ
    def RequestTransferInsertUnit(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferInsertUnit({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Načíst seznam žádostí o převod do jednotky
    def RequestTransferAllUnit(self, ID_Login, ID_Unit, ID_UnitFrom, ID_PersonCreate, ID_PersonDecision, Waiting, ID_RequestTransferState=None):
        return self._client.service.RequestTransferAllUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_UnitFrom": ID_UnitFrom, "ID_PersonCreate": ID_PersonCreate, "ID_PersonDecision": ID_PersonDecision, "Waiting": Waiting, "ID_RequestTransferState": ID_RequestTransferState})

    # Schválit žádost o převod do jiné OJ (Administrátor STS)
    def RequestTransferUpdateApproveAdmin(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateApproveAdmin({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Schválit žádost o převod do jiné OJ (původní PO)
    def RequestTransferUpdateApproveOldAgent(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateApproveOldAgent({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Zamítnout žádost o převod do jiné OJ (PO)
    def RequestTransferUpdateDisapproveAgent(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateDisapproveAgent({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Zamítnout žádost o převod do jiné OJ (Administrátor STS)
    def RequestTransferUpdateDisapproveAdmin(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateDisapproveAdmin({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Upravit žádost o změnu PO
    def RequestAgentUpdateDisapprove(self, ID_Login, ID, ID_TelephonyUnit, ID_UserCreate, ID_PersonCreate, DateCreate, DateDecision, ID_PersonDecision, ID_PersonAgentOld, ID_PersonAgentNew, ID_Unit, ID_RequestAgentState=None, RequestAgentState=None, PersonCreate=None, StateDecision=None, PersonDecision=None, PersonAgentOld=None, PersonAgentNew=None, Unit=None, RegistrationNumber=None):
        return self._client.service.RequestAgentUpdateDisapprove({"ID_Login": ID_Login, "ID": ID, "ID_TelephonyUnit": ID_TelephonyUnit, "ID_UserCreate": ID_UserCreate, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "ID_PersonAgentOld": ID_PersonAgentOld, "ID_PersonAgentNew": ID_PersonAgentNew, "ID_Unit": ID_Unit, "ID_RequestAgentState": ID_RequestAgentState, "RequestAgentState": RequestAgentState, "PersonCreate": PersonCreate, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "PersonAgentOld": PersonAgentOld, "PersonAgentNew": PersonAgentNew, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Upravit přihlášení telefonního čísla
    def EnrollNumberUpdateAdmin(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateAdmin({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst detail přihlášky do STS čísel registrovaných na jednotku
    def EnrollDetailUnit(self, ID_Login, ID_Unit):
        return self._client.service.EnrollDetailUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit})

    # Načíst seznam přihlášených telefonních čísel
    def EnrollNumberAll(self, ID_Login, InProcess, IsUnit, Used, DisplayName=None, ID_EnrollNumberState=None, Person=None, Unit=None, RegistrationNumber=None):
        return self._client.service.EnrollNumberAll({"ID_Login": ID_Login, "InProcess": InProcess, "IsUnit": IsUnit, "Used": Used, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "Person": Person, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Načíst seznam stavů přihlášky do STS
    def EnrollNumberStateAll(self, ID_Login, DisplayName=None):
        return self._client.service.EnrollNumberStateAll({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Odeslat žádost na T-Mobile
    def EnrollNumberUpdateOperatorSent(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateOperatorSent({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Vložit scan dohody o převodu
    def EnrollNumberUpdateScanTransfer(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateScanTransfer({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Přihlášení telefonního čísla bylo zamítnuto T-Mobile
    def EnrollNumberUpdateDisapproveFinal(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateDisapproveFinal({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Přihlášení telefonního čísla bylo schváleno T-Mobile
    def EnrollNumberUpdateApproveFinal(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateApproveFinal({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Změna služeb zamítnuta T-Mobile
    def EnrollNumberUpdateDisapproveOperator(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateDisapproveOperator({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Změna služeb schválena T-Mobile
    def EnrollNumberUpdateApproveOperator(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateApproveOperator({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Zamítnout změnu služeb
    def EnrollNumberUpdateDisapproveChange(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateDisapproveChange({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Schválit změnu služeb
    def EnrollNumberUpdateApproveChange(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateApproveChange({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Změnit tarif a doplňkové služby
    def EnrollNumberChangeTariff(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberChangeTariff({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Stáhnout scan dohody o převodu
    def EnrollNumberScanTransfer(self, ID_Login, ID):
        return self._client.service.EnrollNumberScanTransfer({"ID_Login": ID_Login, "ID": ID})

    # Upravit přihlášku do STS
    def EnrollUpdate(self, ID_Login, ID, ID_TelephonyUnit, ID_Person, IsUnit, IsValid, CallLimitExceeded, InternetLimitExceeded, ID_Unit, DateDecision, IsNewNumberFirst, IsReliable, Person=None, EnrollMessage=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None):
        return self._client.service.EnrollUpdate({"ID_Login": ID_Login, "ID": ID, "ID_TelephonyUnit": ID_TelephonyUnit, "ID_Person": ID_Person, "IsUnit": IsUnit, "IsValid": IsValid, "CallLimitExceeded": CallLimitExceeded, "InternetLimitExceeded": InternetLimitExceeded, "ID_Unit": ID_Unit, "DateDecision": DateDecision, "IsNewNumberFirst": IsNewNumberFirst, "IsReliable": IsReliable, "Person": Person, "EnrollMessage": EnrollMessage, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Načíst seznam vztahů držitele k osobě vlastníka čísla
    def HolderRelationAll(self, ID_Login, ID, DisplayName=None):
        return self._client.service.HolderRelationAll({"ID_Login": ID_Login, "ID": ID, "DisplayName": DisplayName})

    # Načíst seznam žádostí o změnu PO
    def RequestAgentAll(self, ID_Login, ID_TelephonyUnit, ID_UserCreate, ID_PersonDecision, ID_PersonAgentOld, ID_PersonAgentNew, ID_RequestAgentState=None):
        return self._client.service.RequestAgentAll({"ID_Login": ID_Login, "ID_TelephonyUnit": ID_TelephonyUnit, "ID_UserCreate": ID_UserCreate, "ID_PersonDecision": ID_PersonDecision, "ID_PersonAgentOld": ID_PersonAgentOld, "ID_PersonAgentNew": ID_PersonAgentNew, "ID_RequestAgentState": ID_RequestAgentState})

    # Načíst detail žádosti o změnu PO
    def RequestAgentDetail(self, ID_Login, ID):
        return self._client.service.RequestAgentDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit žádost o změnu PO
    def RequestAgentInsert(self, ID_Login, ID, ID_TelephonyUnit, ID_UserCreate, ID_PersonCreate, DateCreate, DateDecision, ID_PersonDecision, ID_PersonAgentOld, ID_PersonAgentNew, ID_Unit, ID_RequestAgentState=None, RequestAgentState=None, PersonCreate=None, StateDecision=None, PersonDecision=None, PersonAgentOld=None, PersonAgentNew=None, Unit=None, RegistrationNumber=None):
        return self._client.service.RequestAgentInsert({"ID_Login": ID_Login, "ID": ID, "ID_TelephonyUnit": ID_TelephonyUnit, "ID_UserCreate": ID_UserCreate, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "ID_PersonAgentOld": ID_PersonAgentOld, "ID_PersonAgentNew": ID_PersonAgentNew, "ID_Unit": ID_Unit, "ID_RequestAgentState": ID_RequestAgentState, "RequestAgentState": RequestAgentState, "PersonCreate": PersonCreate, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "PersonAgentOld": PersonAgentOld, "PersonAgentNew": PersonAgentNew, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Upravit žádost o změnu PO
    def RequestAgentUpdateApprove(self, ID_Login, ID, ID_TelephonyUnit, ID_UserCreate, ID_PersonCreate, DateCreate, DateDecision, ID_PersonDecision, ID_PersonAgentOld, ID_PersonAgentNew, ID_Unit, ID_RequestAgentState=None, RequestAgentState=None, PersonCreate=None, StateDecision=None, PersonDecision=None, PersonAgentOld=None, PersonAgentNew=None, Unit=None, RegistrationNumber=None):
        return self._client.service.RequestAgentUpdateApprove({"ID_Login": ID_Login, "ID": ID, "ID_TelephonyUnit": ID_TelephonyUnit, "ID_UserCreate": ID_UserCreate, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "ID_PersonAgentOld": ID_PersonAgentOld, "ID_PersonAgentNew": ID_PersonAgentNew, "ID_Unit": ID_Unit, "ID_RequestAgentState": ID_RequestAgentState, "RequestAgentState": RequestAgentState, "PersonCreate": PersonCreate, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "PersonAgentOld": PersonAgentOld, "PersonAgentNew": PersonAgentNew, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Načíst seznam žádostí o převod do jiné OJ
    def RequestTransferAll(self, ID_Login, ID_Unit, ID_UnitFrom, ID_PersonCreate, ID_PersonDecision, ID_RequestTransferState=None):
        return self._client.service.RequestTransferAll({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_UnitFrom": ID_UnitFrom, "ID_PersonCreate": ID_PersonCreate, "ID_PersonDecision": ID_PersonDecision, "ID_RequestTransferState": ID_RequestTransferState})

    # Načíst detail žádosti o převod do jiné OJ
    def RequestTransferDetail(self, ID_Login, ID):
        return self._client.service.RequestTransferDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit žádost o převod do jiné OJ
    def RequestTransferInsert(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferInsert({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Schválit žádost o převod do jiné OJ (PO)
    def RequestTransferUpdateApproveAgent(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateApproveAgent({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Načíst seznam žádostí o prodloužení smlouvy
    def RequestRenewalAll(self, ID_Login, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, ID_PersonDecision, ID_PersonFinished, InProcess, ID_RequestRenewalState=None):
        return self._client.service.RequestRenewalAll({"ID_Login": ID_Login, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "ID_PersonDecision": ID_PersonDecision, "ID_PersonFinished": ID_PersonFinished, "InProcess": InProcess, "ID_RequestRenewalState": ID_RequestRenewalState})

    # Načíst detail žádosti o prodloužení smlouvy
    def RequestRenewalDetail(self, ID_Login, ID):
        return self._client.service.RequestRenewalDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit žádost o prodloužení smlouvy
    def RequestRenewalInsert(self, ID_Login, ID, ID_EnrollNumber, ID_Tariff, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_PersonFinished, DateFinished, ID_Person, EnrollNumber=None, ID_RequestRenewalState=None, RequestRenewalState=None, Tariff=None, PersonCreate=None, PersonDecision=None, PersonFinished=None, StateDecision=None, Person=None):
        return self._client.service.RequestRenewalInsert({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "ID_Tariff": ID_Tariff, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_PersonFinished": ID_PersonFinished, "DateFinished": DateFinished, "ID_Person": ID_Person, "EnrollNumber": EnrollNumber, "ID_RequestRenewalState": ID_RequestRenewalState, "RequestRenewalState": RequestRenewalState, "Tariff": Tariff, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "PersonFinished": PersonFinished, "StateDecision": StateDecision, "Person": Person})

    # Zamítnout žádost o převod do jiné OJ (původní PO)
    def RequestTransferUpdateDisapproveOldAgent(self, ID_Login, ID, ID_Enroll, ID_UnitFrom, ID_UnitTo, ID_PersonCreate, DateCreate, ID_PersonDecision, DateDecision, ID_Person, CancelUnitNumbers, HasUnitNumbers, ID_RequestTransferState=None, RequestTransferState=None, Reason=None, UnitFrom=None, RegistrationNumberFrom=None, UnitTo=None, RegistrationNumberTo=None, PersonCreate=None, PersonDecision=None, StateDecision=None, Person=None):
        return self._client.service.RequestTransferUpdateDisapproveOldAgent({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_UnitFrom": ID_UnitFrom, "ID_UnitTo": ID_UnitTo, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonDecision": ID_PersonDecision, "DateDecision": DateDecision, "ID_Person": ID_Person, "CancelUnitNumbers": CancelUnitNumbers, "HasUnitNumbers": HasUnitNumbers, "ID_RequestTransferState": ID_RequestTransferState, "RequestTransferState": RequestTransferState, "Reason": Reason, "UnitFrom": UnitFrom, "RegistrationNumberFrom": RegistrationNumberFrom, "UnitTo": UnitTo, "RegistrationNumberTo": RegistrationNumberTo, "PersonCreate": PersonCreate, "PersonDecision": PersonDecision, "StateDecision": StateDecision, "Person": Person})

    # Smazat roamingový tarif
    def RoamingTariffDelete(self, ID_Login, ID):
        return self._client.service.RoamingTariffDelete({"ID_Login": ID_Login, "ID": ID})

    # Načíst detail roamingového tarifu
    def RoamingTariffDetail(self, ID_Login, ID):
        return self._client.service.RoamingTariffDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit roamingový tarif
    def RoamingTariffInsert(self, ID_Login, ID, DisplayName=None, Code=None, Note=None):
        return self._client.service.RoamingTariffInsert({"ID_Login": ID_Login, "ID": ID, "DisplayName": DisplayName, "Code": Code, "Note": Note})

    # Upravit roamingový tarif
    def RoamingTariffUpdate(self, ID_Login, ID, DisplayName=None, Code=None, Note=None):
        return self._client.service.RoamingTariffUpdate({"ID_Login": ID_Login, "ID": ID, "DisplayName": DisplayName, "Code": Code, "Note": Note})

    # Smazat typ roamingu
    def RoamingTypeDelete(self, ID_Login, ID=None):
        return self._client.service.RoamingTypeDelete({"ID_Login": ID_Login, "ID": ID})

    # Načíst detail typu roamingu
    def RoamingTypeDetail(self, ID_Login, ID=None):
        return self._client.service.RoamingTypeDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit typ roamingu
    def RoamingTypeInsert(self, ID_Login, ID=None, DisplayName=None, Note=None):
        return self._client.service.RoamingTypeInsert({"ID_Login": ID_Login, "ID": ID, "DisplayName": DisplayName, "Note": Note})

    # Upravit typ roamingu
    def RoamingTypeUpdate(self, ID_Login, ID=None, DisplayName=None, Note=None):
        return self._client.service.RoamingTypeUpdate({"ID_Login": ID_Login, "ID": ID, "DisplayName": DisplayName, "Note": Note})

    # Načíst detail tarifu
    def TariffDetail(self, ID_Login, ID):
        return self._client.service.TariffDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit tarif
    def TariffInsert(self, ID_Login, ID, ValidFrom, ValidTo, Cost, FreeMinutes, FreeMinutesExtra, FreeSms, CallTMobile, CallOther, SmsTMobile, SmsOther, Mms, IsHIT, PairWithCallNumber, Order, CanChangeToHit, ID_TariffHit, AllwaysOrder, DataIncreasePrice, ID_TariffData, FupDisabled, ID_InvoiceGroup, ID_TariffType=None, TariffType=None, DisplayName=None, Code=None, DataLimit=None, Note=None, TariffHit=None, DataIncreaseValue=None):
        return self._client.service.TariffInsert({"ID_Login": ID_Login, "ID": ID, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "Cost": Cost, "FreeMinutes": FreeMinutes, "FreeMinutesExtra": FreeMinutesExtra, "FreeSms": FreeSms, "CallTMobile": CallTMobile, "CallOther": CallOther, "SmsTMobile": SmsTMobile, "SmsOther": SmsOther, "Mms": Mms, "IsHIT": IsHIT, "PairWithCallNumber": PairWithCallNumber, "Order": Order, "CanChangeToHit": CanChangeToHit, "ID_TariffHit": ID_TariffHit, "AllwaysOrder": AllwaysOrder, "DataIncreasePrice": DataIncreasePrice, "ID_TariffData": ID_TariffData, "FupDisabled": FupDisabled, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffType": ID_TariffType, "TariffType": TariffType, "DisplayName": DisplayName, "Code": Code, "DataLimit": DataLimit, "Note": Note, "TariffHit": TariffHit, "DataIncreaseValue": DataIncreaseValue})

    # Načíst detail doplňové služby
    def TariffServiceDetail(self, ID_Login, ID, Key=None):
        return self._client.service.TariffServiceDetail({"ID_Login": ID_Login, "ID": ID, "Key": Key})

    # Založit doplňkové služby
    def TariffServiceInsert(self, ID_Login, ID, ValidFrom, ValidTo, IsTransfer, DefaultValue, Order, IsNote, IsValidFrom, IsForeignData, Key=None, DisplayName=None, TrueText=None, FalseText=None, ID_TariffType=None, TariffType=None, Help=None, Url=None):
        return self._client.service.TariffServiceInsert({"ID_Login": ID_Login, "ID": ID, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "IsTransfer": IsTransfer, "DefaultValue": DefaultValue, "Order": Order, "IsNote": IsNote, "IsValidFrom": IsValidFrom, "IsForeignData": IsForeignData, "Key": Key, "DisplayName": DisplayName, "TrueText": TrueText, "FalseText": FalseText, "ID_TariffType": ID_TariffType, "TariffType": TariffType, "Help": Help, "Url": Url})

    # Upravit doplňkové služby
    def TariffServiceUpdate(self, ID_Login, ID, ValidFrom, ValidTo, IsTransfer, DefaultValue, Order, IsNote, IsValidFrom, IsForeignData, Key=None, DisplayName=None, TrueText=None, FalseText=None, ID_TariffType=None, TariffType=None, Help=None, Url=None):
        return self._client.service.TariffServiceUpdate({"ID_Login": ID_Login, "ID": ID, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "IsTransfer": IsTransfer, "DefaultValue": DefaultValue, "Order": Order, "IsNote": IsNote, "IsValidFrom": IsValidFrom, "IsForeignData": IsForeignData, "Key": Key, "DisplayName": DisplayName, "TrueText": TrueText, "FalseText": FalseText, "ID_TariffType": ID_TariffType, "TariffType": TariffType, "Help": Help, "Url": Url})

    # Upravit tarif
    def TariffUpdate(self, ID_Login, ID, ValidFrom, ValidTo, Cost, FreeMinutes, FreeMinutesExtra, FreeSms, CallTMobile, CallOther, SmsTMobile, SmsOther, Mms, IsHIT, PairWithCallNumber, Order, CanChangeToHit, ID_TariffHit, AllwaysOrder, DataIncreasePrice, ID_TariffData, FupDisabled, ID_InvoiceGroup, ID_TariffType=None, TariffType=None, DisplayName=None, Code=None, DataLimit=None, Note=None, TariffHit=None, DataIncreaseValue=None):
        return self._client.service.TariffUpdate({"ID_Login": ID_Login, "ID": ID, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "Cost": Cost, "FreeMinutes": FreeMinutes, "FreeMinutesExtra": FreeMinutesExtra, "FreeSms": FreeSms, "CallTMobile": CallTMobile, "CallOther": CallOther, "SmsTMobile": SmsTMobile, "SmsOther": SmsOther, "Mms": Mms, "IsHIT": IsHIT, "PairWithCallNumber": PairWithCallNumber, "Order": Order, "CanChangeToHit": CanChangeToHit, "ID_TariffHit": ID_TariffHit, "AllwaysOrder": AllwaysOrder, "DataIncreasePrice": DataIncreasePrice, "ID_TariffData": ID_TariffData, "FupDisabled": FupDisabled, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffType": ID_TariffType, "TariffType": TariffType, "DisplayName": DisplayName, "Code": Code, "DataLimit": DataLimit, "Note": Note, "TariffHit": TariffHit, "DataIncreaseValue": DataIncreaseValue})

    # Načíst typ platby jednotky v STS
    def TelephonyUnitDetailPaymentType(self, ID_Login, ID_Unit):
        return self._client.service.TelephonyUnitDetailPaymentType({"ID_Login": ID_Login, "ID_Unit": ID_Unit})

    # Načíst platnou přihlášku jednotky do STS
    def TelephonyUnitDetailUnit(self, ID_Login, ID_Unit):
        return self._client.service.TelephonyUnitDetailUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit})

    # Načíst detail přihlášky do STS
    def EnrollDetail(self, ID_Login, ID_Person):
        return self._client.service.EnrollDetail({"ID_Login": ID_Login, "ID_Person": ID_Person})

    # Odeslat uživateli ke kontrole
    def EnrollNumberSendVerification(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberSendVerification({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberAllPerson(self, ID_Login, ID_Person, ID_Tariff, Unpaired, DisplayName=None, ID_EnrollNumberState=None, ID_Operator=None):
        return self._client.service.EnrollNumberAllPerson({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_Tariff": ID_Tariff, "Unpaired": Unpaired, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "ID_Operator": ID_Operator})

    # Načíst seznam objednaných doplňkových služeb
    def EnrollNumberServiceAll(self, ID_Login, ID_EnrollNumber, ID_TariffService):
        return self._client.service.EnrollNumberServiceAll({"ID_Login": ID_Login, "ID_EnrollNumber": ID_EnrollNumber, "ID_TariffService": ID_TariffService})

    # Zamítnout přihlášení telefonního čísla
    def EnrollNumberUpdateDisapprove(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateDisapprove({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Schválit přihlášení telefonního čísla
    def EnrollNumberUpdateApprove(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateApprove({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberAllUnit(self, ID_Login, ID_Unit, InProcess, ID_Tariff, IsUnit, Used, Unpaired, DisplayName=None, ID_EnrollNumberState=None, ID_Operator=None):
        return self._client.service.EnrollNumberAllUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "InProcess": InProcess, "ID_Tariff": ID_Tariff, "IsUnit": IsUnit, "Used": Used, "Unpaired": Unpaired, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "ID_Operator": ID_Operator})

    # Načíst detail přihlášení telefonního čísla
    def EnrollNumberDetail(self, ID_Login, ID, ApplyInternetKuj):
        return self._client.service.EnrollNumberDetail({"ID_Login": ID_Login, "ID": ID, "ApplyInternetKuj": ApplyInternetKuj})

    # Založit přihlášení telefonního čísla
    def EnrollNumberInsert(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberInsert({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Upravit přihlášení telefonního čísla
    def EnrollNumberUpdate(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdate({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst seznam operátorů
    def OperatorAll(self, ID_Login, DisplayName=None):
        return self._client.service.OperatorAll({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Načíst seznam roamingových tarifů
    def RoamingTariffAll(self, ID_Login, ID, ID_EnrollNumber, DisplayName=None):
        return self._client.service.RoamingTariffAll({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber, "DisplayName": DisplayName})

    # Načíst seznam typů roamingu
    def RoamingTypeAll(self, ID_Login, ID_EnrollNumber, ID=None, DisplayName=None):
        return self._client.service.RoamingTypeAll({"ID_Login": ID_Login, "ID_EnrollNumber": ID_EnrollNumber, "ID": ID, "DisplayName": DisplayName})

    # Načíst seznam tarifů
    def TariffAll(self, ID_Login, ID, IsHIT, ID_EnrollNumber, All, AllwaysOrder, UseAlwaysOrder, ShowTariffData, ID_TariffType=None, DisplayName=None):
        return self._client.service.TariffAll({"ID_Login": ID_Login, "ID": ID, "IsHIT": IsHIT, "ID_EnrollNumber": ID_EnrollNumber, "All": All, "AllwaysOrder": AllwaysOrder, "UseAlwaysOrder": UseAlwaysOrder, "ShowTariffData": ShowTariffData, "ID_TariffType": ID_TariffType, "DisplayName": DisplayName})

    # Načíst seznam doplňkových služeb
    def TariffServiceAll(self, ID_Login, ID, IsTransfer, ID_EnrollNumber, All, IsHidden, IsForeignData, Key=None, DisplayName=None, ID_TariffType=None):
        return self._client.service.TariffServiceAll({"ID_Login": ID_Login, "ID": ID, "IsTransfer": IsTransfer, "ID_EnrollNumber": ID_EnrollNumber, "All": All, "IsHidden": IsHidden, "IsForeignData": IsForeignData, "Key": Key, "DisplayName": DisplayName, "ID_TariffType": ID_TariffType})

    # Načíst seznam typů tarifu
    def TariffTypeAll(self, ID_Login, IsStandalone, ID=None, DisplayName=None):
        return self._client.service.TariffTypeAll({"ID_Login": ID_Login, "IsStandalone": IsStandalone, "ID": ID, "DisplayName": DisplayName})

    # Zamítnout přihlášku jednotky do STS
    def TelephonyUnitUpdateDisapprove(self, ID_Login, ID, ID_Unit, ID_UserCreate, DateCreate, ID_PersonAgent, DateDecision, ID_PersonDecision, Agrees, RegistrationService, ID_InvoiceGroup, Unit=None, RegistrationNumber=None, ID_TelephonyUnitState=None, TelephonyUnitState=None, UserCreate=None, PersonAgent=None, UserNameAgent=None, StateDecision=None, PersonDecision=None, EnrollMessage=None, InvoiceGroup=None):
        return self._client.service.TelephonyUnitUpdateDisapprove({"ID_Login": ID_Login, "ID": ID, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "ID_PersonAgent": ID_PersonAgent, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "Agrees": Agrees, "RegistrationService": RegistrationService, "ID_InvoiceGroup": ID_InvoiceGroup, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "ID_TelephonyUnitState": ID_TelephonyUnitState, "TelephonyUnitState": TelephonyUnitState, "UserCreate": UserCreate, "PersonAgent": PersonAgent, "UserNameAgent": UserNameAgent, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "EnrollMessage": EnrollMessage, "InvoiceGroup": InvoiceGroup})

    # Potvrdit přihlášku jednotky do STS
    def TelephonyUnitUpdateApprove(self, ID_Login, ID, ID_Unit, ID_UserCreate, DateCreate, ID_PersonAgent, DateDecision, ID_PersonDecision, Agrees, RegistrationService, ID_InvoiceGroup, Unit=None, RegistrationNumber=None, ID_TelephonyUnitState=None, TelephonyUnitState=None, UserCreate=None, PersonAgent=None, UserNameAgent=None, StateDecision=None, PersonDecision=None, EnrollMessage=None, InvoiceGroup=None):
        return self._client.service.TelephonyUnitUpdateApprove({"ID_Login": ID_Login, "ID": ID, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "ID_PersonAgent": ID_PersonAgent, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "Agrees": Agrees, "RegistrationService": RegistrationService, "ID_InvoiceGroup": ID_InvoiceGroup, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "ID_TelephonyUnitState": ID_TelephonyUnitState, "TelephonyUnitState": TelephonyUnitState, "UserCreate": UserCreate, "PersonAgent": PersonAgent, "UserNameAgent": UserNameAgent, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "EnrollMessage": EnrollMessage, "InvoiceGroup": InvoiceGroup})

    # Načíst seznam přihlášek jednotky do STS
    def TelephonyUnitAllUnit(self, ID_Login, ID_Unit, ID_UserCreate, ID_PersonAgent, ID_PersonDecision, ID_TelephonyUnitState=None):
        return self._client.service.TelephonyUnitAllUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "ID_PersonAgent": ID_PersonAgent, "ID_PersonDecision": ID_PersonDecision, "ID_TelephonyUnitState": ID_TelephonyUnitState})

    # Načíst seznam přihlášek do STS
    def TelephonyUnitAll(self, ID_Login, ID_Unit, ID_UserCreate, ID_PersonAgent, ID_PersonDecision, ID_TelephonyUnitState=None):
        return self._client.service.TelephonyUnitAll({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "ID_PersonAgent": ID_PersonAgent, "ID_PersonDecision": ID_PersonDecision, "ID_TelephonyUnitState": ID_TelephonyUnitState})

    # Načíst detail přihlášky jednotky do STS
    def TelephonyUnitDetail(self, ID_Login, ID):
        return self._client.service.TelephonyUnitDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit přihlášku jednotky do STS
    def TelephonyUnitInsert(self, ID_Login, ID, ID_Unit, ID_UserCreate, DateCreate, ID_PersonAgent, DateDecision, ID_PersonDecision, Agrees, RegistrationService, ID_InvoiceGroup, Unit=None, RegistrationNumber=None, ID_TelephonyUnitState=None, TelephonyUnitState=None, UserCreate=None, PersonAgent=None, UserNameAgent=None, StateDecision=None, PersonDecision=None, EnrollMessage=None, InvoiceGroup=None):
        return self._client.service.TelephonyUnitInsert({"ID_Login": ID_Login, "ID": ID, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "ID_PersonAgent": ID_PersonAgent, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "Agrees": Agrees, "RegistrationService": RegistrationService, "ID_InvoiceGroup": ID_InvoiceGroup, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "ID_TelephonyUnitState": ID_TelephonyUnitState, "TelephonyUnitState": TelephonyUnitState, "UserCreate": UserCreate, "PersonAgent": PersonAgent, "UserNameAgent": UserNameAgent, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "EnrollMessage": EnrollMessage, "InvoiceGroup": InvoiceGroup})

    # Upravit přihlášku jednotky do STS
    def TelephonyUnitUpdate(self, ID_Login, ID, ID_Unit, ID_UserCreate, DateCreate, ID_PersonAgent, DateDecision, ID_PersonDecision, Agrees, RegistrationService, ID_InvoiceGroup, Unit=None, RegistrationNumber=None, ID_TelephonyUnitState=None, TelephonyUnitState=None, UserCreate=None, PersonAgent=None, UserNameAgent=None, StateDecision=None, PersonDecision=None, EnrollMessage=None, InvoiceGroup=None):
        return self._client.service.TelephonyUnitUpdate({"ID_Login": ID_Login, "ID": ID, "ID_Unit": ID_Unit, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "ID_PersonAgent": ID_PersonAgent, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "Agrees": Agrees, "RegistrationService": RegistrationService, "ID_InvoiceGroup": ID_InvoiceGroup, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "ID_TelephonyUnitState": ID_TelephonyUnitState, "TelephonyUnitState": TelephonyUnitState, "UserCreate": UserCreate, "PersonAgent": PersonAgent, "UserNameAgent": UserNameAgent, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "EnrollMessage": EnrollMessage, "InvoiceGroup": InvoiceGroup})

    # Upravit typ platby jednotky v STS
    def TelephonyUnitUpdatePaymentType(self, ID_Login, ID, ID_Unit, ID_Bank, PaymentFrom, PaymentLimit, Unit=None, ID_PaymentType=None, PaymentType=None, BankAccount=None, AccountPrefix=None, AccountNumber=None, Bank=None):
        return self._client.service.TelephonyUnitUpdatePaymentType({"ID_Login": ID_Login, "ID": ID, "ID_Unit": ID_Unit, "ID_Bank": ID_Bank, "PaymentFrom": PaymentFrom, "PaymentLimit": PaymentLimit, "Unit": Unit, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "BankAccount": BankAccount, "AccountPrefix": AccountPrefix, "AccountNumber": AccountNumber, "Bank": Bank})

    # Načíst seznam typů hovorů/služeb
    def CallServiceType(self, ID_Login, DisplayName=None):
        return self._client.service.CallServiceType({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Zobrazit všechny přihlášky
    def EnrollAllUnit(self, ID_Login, ID):
        return self._client.service.EnrollAllUnit({"ID_Login": ID_Login, "ID": ID})

    # Načíst přehled neplatičů faktur za STS
    def EnrollInvoiceAllBadPayers(self, ID_Login):
        return self._client.service.EnrollInvoiceAllBadPayers({"ID_Login": ID_Login})

    # Načíst detail faktury za STS
    def EnrollInvoiceDetail(self, ID_Login, ID):
        return self._client.service.EnrollInvoiceDetail({"ID_Login": ID_Login, "ID": ID})

    # Načíst seznam položek faktury
    def EnrollInvoiceItemAllEnrollInvoiceExport(self, ID_Login, ID_EnrollInvoice):
        return self._client.service.EnrollInvoiceItemAllEnrollInvoiceExport({"ID_Login": ID_Login, "ID_EnrollInvoice": ID_EnrollInvoice})

    # Načíst rekapitulaci DHP
    def EnrollInvoiceItemAllSummaryVat(self, ID_Login, ID_EnrollInvoice):
        return self._client.service.EnrollInvoiceItemAllSummaryVat({"ID_Login": ID_Login, "ID_EnrollInvoice": ID_EnrollInvoice})

    # Založit počet spotřebovaných dat dle detailního výpisu
    def EnrollInvoiceServiceInsertCall(self, ID_Login, Month, Year):
        return self._client.service.EnrollInvoiceServiceInsertCall({"ID_Login": ID_Login, "Month": Month, "Year": Year})

    # Odešle zprávy se spožděním
    def EnrollInvoiceUpdateCashingHasBeenExceeded(self, ID_Login):
        return self._client.service.EnrollInvoiceUpdateCashingHasBeenExceeded({"ID_Login": ID_Login})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberDetailTotalSpending(self, ID_Login, ID_Person, ID_EnrollNumber, IsGraph=None):
        return self._client.service.EnrollNumberDetailTotalSpending({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_EnrollNumber": ID_EnrollNumber, "IsGraph": IsGraph})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberDetailTotalSpendingDataTable(self, ID_Login, ID_Person, ID_EnrollNumber, IsGraph=None):
        return self._client.service.EnrollNumberDetailTotalSpendingDataTable({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_EnrollNumber": ID_EnrollNumber, "IsGraph": IsGraph})

    # Načte přehled čerpání pro dané telefonní číslo
    def EnrollNumberAllUsage(self, ID_Login, ID, ShowCallServiceType, ReturnSum, AddNonExistingCallTypes, BillingCount):
        return self._client.service.EnrollNumberAllUsage({"ID_Login": ID_Login, "ID": ID, "ShowCallServiceType": ShowCallServiceType, "ReturnSum": ReturnSum, "AddNonExistingCallTypes": AddNonExistingCallTypes, "BillingCount": BillingCount})

    # Načte přehled čerpání pro dané telefonní číslo do datatable
    def EnrollNumberAllUsageDataTable(self, ID_Login, ID, ShowCallServiceType, ReturnSum, AddNonExistingCallTypes, BillingCount):
        return self._client.service.EnrollNumberAllUsageDataTable({"ID_Login": ID_Login, "ID": ID, "ShowCallServiceType": ShowCallServiceType, "ReturnSum": ReturnSum, "AddNonExistingCallTypes": AddNonExistingCallTypes, "BillingCount": BillingCount})

    # Načíst výchozí fakturační jednotku
    def InvoiceGroupDetailDefault(self, ID_Login):
        return self._client.service.InvoiceGroupDetailDefault({"ID_Login": ID_Login})

    # Načíst seznam přeplatků, pro které ještě nebyl generován příkaz
    def OverpaymentAllNotGenerated(self, ID_Login):
        return self._client.service.OverpaymentAllNotGenerated({"ID_Login": ID_Login})

    # Načíst seznam přeplatků
    def OverpaymentAll(self, ID_Login, ID, ID_Payment, IsGenerated, IsHandled, ShowOnlyNotRefunded, DisplayName=None):
        return self._client.service.OverpaymentAll({"ID_Login": ID_Login, "ID": ID, "ID_Payment": ID_Payment, "IsGenerated": IsGenerated, "IsHandled": IsHandled, "ShowOnlyNotRefunded": ShowOnlyNotRefunded, "DisplayName": DisplayName})

    # Založit přeplatek
    def OverpaymentInsert(self, ID_Login, ID, IsActive, ActualDate, IssueDate, Amount, ID_Payment, IsOrderGenerated, DisplayName=None, Payment=None):
        return self._client.service.OverpaymentInsert({"ID_Login": ID_Login, "ID": ID, "IsActive": IsActive, "ActualDate": ActualDate, "IssueDate": IssueDate, "Amount": Amount, "ID_Payment": ID_Payment, "IsOrderGenerated": IsOrderGenerated, "DisplayName": DisplayName, "Payment": Payment})

    # Načíst seznam platebních příkazů pro vrácení přeplatků
    def OverpaymentOrderAll(self, ID_Login, ID, IsDownloaded):
        return self._client.service.OverpaymentOrderAll({"ID_Login": ID_Login, "ID": ID, "IsDownloaded": IsDownloaded})

    # Založit platební příkaz pro vrácení přeplatků
    def OverpaymentOrderInsert(self, ID_Login, ID, IsActive, DateCreate, DateDownload):
        return self._client.service.OverpaymentOrderInsert({"ID_Login": ID_Login, "ID": ID, "IsActive": IsActive, "DateCreate": DateCreate, "DateDownload": DateDownload})

    # Upravit dokument u platebního příkazu pro vrácení přeplatků
    def OverpaymentOrderUpdateDocument(self, ID_Login, ID, ID_TempFile):
        return self._client.service.OverpaymentOrderUpdateDocument({"ID_Login": ID_Login, "ID": ID, "ID_TempFile": ID_TempFile})

    # Upravit platební příkaz pro vrácení přeplatků
    def OverpaymentOrderUpdate(self, ID_Login, ID, IsActive, DateCreate, DateDownload):
        return self._client.service.OverpaymentOrderUpdate({"ID_Login": ID_Login, "ID": ID, "IsActive": IsActive, "DateCreate": DateCreate, "DateDownload": DateDownload})

    # Přeplatek zpracován
    def OverpaymentUpdateGenerateAll(self, ID_Login, ID_OverpaymentOrder, ID_List=None):
        return self._client.service.OverpaymentUpdateGenerateAll({"ID_Login": ID_Login, "ID_OverpaymentOrder": ID_OverpaymentOrder, "ID_List": ID_List})

    # Přeplatek zpracován
    def OverpaymentUpdateHandleAll(self, ID_Login, ID_List=None):
        return self._client.service.OverpaymentUpdateHandleAll({"ID_Login": ID_Login, "ID_List": ID_List})

    # Upravit přeplatek
    def OverpaymentUpdate(self, ID_Login, ID, IsActive, ActualDate, IssueDate, Amount, ID_Payment, IsOrderGenerated, DisplayName=None, Payment=None):
        return self._client.service.OverpaymentUpdate({"ID_Login": ID_Login, "ID": ID, "IsActive": IsActive, "ActualDate": ActualDate, "IssueDate": IssueDate, "Amount": Amount, "ID_Payment": ID_Payment, "IsOrderGenerated": IsOrderGenerated, "DisplayName": DisplayName, "Payment": Payment})

    # Načíst seznam přihlášených telefonních čísel
    def TariffServiceAllEnrollNumber(self, ID_Login, ID, ID_EnrollNumber):
        return self._client.service.TariffServiceAllEnrollNumber({"ID_Login": ID_Login, "ID": ID, "ID_EnrollNumber": ID_EnrollNumber})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberDetailUsageOverview(self, ID_Login, ID_Person, ID_EnrollNumber):
        return self._client.service.EnrollNumberDetailUsageOverview({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_EnrollNumber": ID_EnrollNumber})

    # Načíst seznam přihlášených telefonních čísel osoby
    def EnrollNumberDetailUsageOverviewDataTable(self, ID_Login, ID_Person, ID_EnrollNumber):
        return self._client.service.EnrollNumberDetailUsageOverviewDataTable({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_EnrollNumber": ID_EnrollNumber})

    # Načíst reklamu faktury za STS
    def EnrollInvoiceDetailBanner(self, ID_Login):
        return self._client.service.EnrollInvoiceDetailBanner({"ID_Login": ID_Login})

    # Upravit reklamu faktury za STS
    def EnrollInvoiceUpdateBanner(self, ID_Login, Content=None):
        return self._client.service.EnrollInvoiceUpdateBanner({"ID_Login": ID_Login, "Content": Content})

    # Smazat reklamu faktury za STS
    def EnrollInvoiceUpdateRemoveBanner(self, ID_Login):
        return self._client.service.EnrollInvoiceUpdateRemoveBanner({"ID_Login": ID_Login})

    # Načíst seznam nespárovaných telefonních čísel s fakturami
    def EnrollNumberAllUninvoiced(self, ID_Login, Year, Month):
        return self._client.service.EnrollNumberAllUninvoiced({"ID_Login": ID_Login, "Year": Year, "Month": Month})

    # Upravit spolehliva osoba STS
    def EnrollUpdateIsReliable(self, ID_Login, ID_Person, ID, IsReliable):
        return self._client.service.EnrollUpdateIsReliable({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID": ID, "IsReliable": IsReliable})

    # Načíst seznam typu navýšení FUP
    def FupTypeAll(self, ID_Login, IsAvailable, ID, Order, DisplayName=None, Note=None):
        return self._client.service.FupTypeAll({"ID_Login": ID_Login, "IsAvailable": IsAvailable, "ID": ID, "Order": Order, "DisplayName": DisplayName, "Note": Note})

    # Smazat typ navýšení FUP
    def FupTypeDelete(self, ID_Login, ID):
        return self._client.service.FupTypeDelete({"ID_Login": ID_Login, "ID": ID})

    # Načíst detail typu navýšení FUP
    def FupTypeDetail(self, ID_Login, ID):
        return self._client.service.FupTypeDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit typ navýšení FUP
    def FupTypeInsert(self, ID_Login, ID, IsAvailable, Price, ValidFrom, ValidTo, Order, DisplayName=None, Note=None):
        return self._client.service.FupTypeInsert({"ID_Login": ID_Login, "ID": ID, "IsAvailable": IsAvailable, "Price": Price, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "Order": Order, "DisplayName": DisplayName, "Note": Note})

    # Upravit typ navýšení FUP
    def FupTypeUpdate(self, ID_Login, ID, IsAvailable, Price, ValidFrom, ValidTo, Order, DisplayName=None, Note=None):
        return self._client.service.FupTypeUpdate({"ID_Login": ID_Login, "ID": ID, "IsAvailable": IsAvailable, "Price": Price, "ValidFrom": ValidFrom, "ValidTo": ValidTo, "Order": Order, "DisplayName": DisplayName, "Note": Note})

    # Načíst seznam fakturačních jednotek
    def InvoiceGroupAll(self, ID_Login, ID, ID_TelephonyUnit, DisplayName=None):
        return self._client.service.InvoiceGroupAll({"ID_Login": ID_Login, "ID": ID, "ID_TelephonyUnit": ID_TelephonyUnit, "DisplayName": DisplayName})

    # Založit službu hovoru
    def CallServiceInsert(self, ID_Login, SfnIdArray=None):
        return self._client.service.CallServiceInsert({"ID_Login": ID_Login, "SfnIdArray": SfnIdArray})

    # Založit jednotku hovoru
    def CallUnitInsert(self, ID_Login, SfnUnitTypeArray=None, SfnIdArray=None):
        return self._client.service.CallUnitInsert({"ID_Login": ID_Login, "SfnUnitTypeArray": SfnUnitTypeArray, "SfnIdArray": SfnIdArray})

    # Načíst seznam souhrnů faktur za STS
    def EnrollInvoiceSummaryAll(self, ID_Login, ID, IsGenerated):
        return self._client.service.EnrollInvoiceSummaryAll({"ID_Login": ID_Login, "ID": ID, "IsGenerated": IsGenerated})

    # Stáhnout XML souhrnu faktur za STS
    def EnrollInvoiceSummaryDetailDownload(self, ID_Login, ID, IsUnit):
        return self._client.service.EnrollInvoiceSummaryDetailDownload({"ID_Login": ID_Login, "ID": ID, "IsUnit": IsUnit})

    # Založit souhrn faktur za STS za daný měsíc
    def EnrollInvoiceSummaryInsertMonth(self, ID_Login, Month, Year):
        return self._client.service.EnrollInvoiceSummaryInsertMonth({"ID_Login": ID_Login, "Month": Month, "Year": Year})

    # Vygenerovat souhrn faktur za STS
    def EnrollInvoiceSummaryUpdateGenerate(self, enrollInvoiceSummaryInput=None):
        return self._client.service.EnrollInvoiceSummaryUpdateGenerate({"enrollInvoiceSummaryInput": enrollInvoiceSummaryInput})

    # Načíst telefonní čísla k hromadné žádosti
    def EnrollNumberAllRequestBatch(self, ID_Login, ID_RequestBatch):
        return self._client.service.EnrollNumberAllRequestBatch({"ID_Login": ID_Login, "ID_RequestBatch": ID_RequestBatch})

    # Načíst seznam nepropojených telefonních čísel
    def EnrollNumberAllUnpaired(self, ID_Login, ID_Person, ID_Unit, ID):
        return self._client.service.EnrollNumberAllUnpaired({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_Unit": ID_Unit, "ID": ID})

    # Smazat telefonní číslo
    def EnrollNumberDelete(self, ID_Login, ID, StateDecision=None):
        return self._client.service.EnrollNumberDelete({"ID_Login": ID_Login, "ID": ID, "StateDecision": StateDecision})

    # Zjistit zda je číslo v STS
    def EnrollNumberDetailIsSts(self, ID_Login, ID_Application, DisplayName=None):
        return self._client.service.EnrollNumberDetailIsSts({"ID_Login": ID_Login, "ID_Application": ID_Application, "DisplayName": DisplayName})

    # Upozornit na blížící se konec smlouvy
    def EnrollNumberReminderValidTo(self, ID_Login):
        return self._client.service.EnrollNumberReminderValidTo({"ID_Login": ID_Login})

    # Kontrola termínu závazku
    def EnrollNumberCheckValidTo(self, ID_Login):
        return self._client.service.EnrollNumberCheckValidTo({"ID_Login": ID_Login})

    # Načíst typ platby osoby v STS
    def EnrollDetailPaymentType(self, ID_Login, ID_Person):
        return self._client.service.EnrollDetailPaymentType({"ID_Login": ID_Login, "ID_Person": ID_Person})

    # Načíst seznam hovorů/služeb
    def CallAll(self, ID_Login, ID_EnrollInvoiceItem, OverallService):
        return self._client.service.CallAll({"ID_Login": ID_Login, "ID_EnrollInvoiceItem": ID_EnrollInvoiceItem, "OverallService": OverallService})

    # Aktualizovat údaje o držitelích volaných čísel za daný měsíc
    def CallUpdateHolderInformation(self, ID_Login, Month, Year):
        return self._client.service.CallUpdateHolderInformation({"ID_Login": ID_Login, "Month": Month, "Year": Year})

    # Zrušit přihlášení telefonního čísla
    def EnrollNumberUpdateCancel(self, ID_Login, ID, StateDecision=None):
        return self._client.service.EnrollNumberUpdateCancel({"ID_Login": ID_Login, "ID": ID, "StateDecision": StateDecision})

    # Zadat číslo výpovědi opuštěného poskytovatele
    def EnrollNumberUpdateCvop(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateCvop({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Navýšit FUP
    def EnrollNumberUpdateFup(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateFup({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst seznam faktur STS s číslem
    def EnrollInvoiceAllEnrollNumber(self, ID_Login, ID_EnrollNumber, ID_Enroll, ID_PersonCreate, ID_PersonRecipient, DisplayName=None, ID_EnrollInvoiceState=None):
        return self._client.service.EnrollInvoiceAllEnrollNumber({"ID_Login": ID_Login, "ID_EnrollNumber": ID_EnrollNumber, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "ID_PersonRecipient": ID_PersonRecipient, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState})

    # Načíst detail poslední faktury za STS pro osobu
    def EnrollInvoiceDetailPerson(self, ID_Login, ID_Person):
        return self._client.service.EnrollInvoiceDetailPerson({"ID_Login": ID_Login, "ID_Person": ID_Person})

    # Přefakturovat nezaplacenou fakturu na OJ
    def EnrollInvoiceUpdateReinvoice(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateReinvoice({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Poslat všechny upomínky (první, po 7/21 dnech)
    def EnrollInvoiceUpdateReminderAll(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateReminderAll({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Poslat upomínku
    def EnrollInvoiceUpdateReminder(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateReminder({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Poslat první upomínku fakturám po splatnosti
    def EnrollInvoiceUpdateReminderDate(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateReminderDate({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Načíst detail faktury za STS
    def EnrollInvoiceDownloadPdf(self, ID_Login, ID):
        return self._client.service.EnrollInvoiceDownloadPdf({"ID_Login": ID_Login, "ID": ID})

    # Založit vyúčtování hovoru
    def EnrollInvoiceItemInsertCallItem(self, EnrollInvoiceItem=None):
        return self._client.service.EnrollInvoiceItemInsertCallItem({"EnrollInvoiceItem": EnrollInvoiceItem})

    # Načíst seznam typů položky STS faktury
    def EnrollInvoiceItemTypeAll(self, ID_Login, DisplayName=None, ID=None):
        return self._client.service.EnrollInvoiceItemTypeAll({"ID_Login": ID_Login, "DisplayName": DisplayName, "ID": ID})

    # Upravit typ položky STS faktury
    def EnrollInvoiceItemTypeUpdate(self, ID_Login, Price, ID=None, DisplayName=None, Note=None):
        return self._client.service.EnrollInvoiceItemTypeUpdate({"ID_Login": ID_Login, "Price": Price, "ID": ID, "DisplayName": DisplayName, "Note": Note})

    # Založit vyúčtování služby
    def EnrollInvoiceServiceInsert(self, EnrollInvoiceService=None):
        return self._client.service.EnrollInvoiceServiceInsert({"EnrollInvoiceService": EnrollInvoiceService})

    # Načíst seznam vyúčtování služeb
    def EnrollInvoiceServiceAll(self, ID_Login, ID_EnrollInvoiceItem, ID_CallService, ID_CallUnit):
        return self._client.service.EnrollInvoiceServiceAll({"ID_Login": ID_Login, "ID_EnrollInvoiceItem": ID_EnrollInvoiceItem, "ID_CallService": ID_CallService, "ID_CallUnit": ID_CallUnit})

    # Smazat vyúčtování služeb za měsíc
    def EnrollInvoiceServiceDeleteMonth(self, ID_Login, Month, Year):
        return self._client.service.EnrollInvoiceServiceDeleteMonth({"ID_Login": ID_Login, "Month": Month, "Year": Year})

    # Stornovat fakturu za STS
    def EnrollInvoiceUpdateCancel(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateCancel({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Znovu zaslat fakturu za STS
    def EnrollInvoiceUpdateResend(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateResend({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Chyba při odeslání faktury za STS
    def EnrollInvoiceUpdateError(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateError({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Odeslat fakturu za STS
    def EnrollInvoiceUpdateSent(self, ID_Login, ID, ID_Enroll, ID_PersonCreate, DateCreate, ID_PersonRecipient, DateSent, Maturity, Sequence, DateFrom, DateTo, Price, IsUnit, ID_Unit, ID_Person, ReminderSend, ReminderCount, ID_InvoiceGroup, ID_EnrollInvoiceSummary, CashingHasBeenExceeded, DateTaxableSupply, ID_Document, Enroll=None, DisplayName=None, ID_EnrollInvoiceState=None, EnrollInvoiceState=None, PersonCreate=None, PersonRecipient=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Unit=None, RegistrationNumber=None, IC=None, DIC=None, Person=None, PersonCivil=None, ID_PaymentType=None, PaymentType=None, InvoiceGroup=None, InvoiceGroupContractor=None, InvoiceGroupContractorAddress=None, InvoiceGroupContractorPhone=None, InvoiceGroupContractorFax=None, InvoiceGroupContractorEmail=None, InvoiceGroupContractorIC=None, InvoiceGroupContractorDIC=None, InvoiceGroupBankAccount=None, InvoiceGroupBankCode=None, InvoiceGroupFileReference=None, Spayd=None, InvoiceGroupBank=None, InvoiceGroupWeb=None):
        return self._client.service.EnrollInvoiceUpdateSent({"ID_Login": ID_Login, "ID": ID, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "DateCreate": DateCreate, "ID_PersonRecipient": ID_PersonRecipient, "DateSent": DateSent, "Maturity": Maturity, "Sequence": Sequence, "DateFrom": DateFrom, "DateTo": DateTo, "Price": Price, "IsUnit": IsUnit, "ID_Unit": ID_Unit, "ID_Person": ID_Person, "ReminderSend": ReminderSend, "ReminderCount": ReminderCount, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_EnrollInvoiceSummary": ID_EnrollInvoiceSummary, "CashingHasBeenExceeded": CashingHasBeenExceeded, "DateTaxableSupply": DateTaxableSupply, "ID_Document": ID_Document, "Enroll": Enroll, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollInvoiceState": EnrollInvoiceState, "PersonCreate": PersonCreate, "PersonRecipient": PersonRecipient, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "IC": IC, "DIC": DIC, "Person": Person, "PersonCivil": PersonCivil, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "InvoiceGroup": InvoiceGroup, "InvoiceGroupContractor": InvoiceGroupContractor, "InvoiceGroupContractorAddress": InvoiceGroupContractorAddress, "InvoiceGroupContractorPhone": InvoiceGroupContractorPhone, "InvoiceGroupContractorFax": InvoiceGroupContractorFax, "InvoiceGroupContractorEmail": InvoiceGroupContractorEmail, "InvoiceGroupContractorIC": InvoiceGroupContractorIC, "InvoiceGroupContractorDIC": InvoiceGroupContractorDIC, "InvoiceGroupBankAccount": InvoiceGroupBankAccount, "InvoiceGroupBankCode": InvoiceGroupBankCode, "InvoiceGroupFileReference": InvoiceGroupFileReference, "Spayd": Spayd, "InvoiceGroupBank": InvoiceGroupBank, "InvoiceGroupWeb": InvoiceGroupWeb})

    # Načíst seznam faktur jednotky  za STS
    def EnrollInvoiceAllUnit(self, ID_Login, ID_Unit, ID_Enroll, ID_PersonCreate, ID_PersonRecipient, NonPaid, DateFromMonth, DateFromYear, OnlyPerson, DisplayName=None, ID_EnrollInvoiceState=None):
        return self._client.service.EnrollInvoiceAllUnit({"ID_Login": ID_Login, "ID_Unit": ID_Unit, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "ID_PersonRecipient": ID_PersonRecipient, "NonPaid": NonPaid, "DateFromMonth": DateFromMonth, "DateFromYear": DateFromYear, "OnlyPerson": OnlyPerson, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState})

    # Načíst seznam faktur za STS
    def EnrollInvoiceAllPerson(self, ID_Login, ID_Person, ID_Enroll, ID_PersonCreate, ID_PersonRecipient, DisplayName=None, ID_EnrollInvoiceState=None):
        return self._client.service.EnrollInvoiceAllPerson({"ID_Login": ID_Login, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "ID_PersonRecipient": ID_PersonRecipient, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState})

    # Upravit typ platby osoby v STS
    def EnrollUpdatePaymentType(self, ID_Login, ID, ID_Person, ID_Bank, PaymentFrom, PaymentLimit, Person=None, ID_PaymentType=None, PaymentType=None, BankAccount=None, AccountPrefix=None, AccountNumber=None, Bank=None):
        return self._client.service.EnrollUpdatePaymentType({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Bank": ID_Bank, "PaymentFrom": PaymentFrom, "PaymentLimit": PaymentLimit, "Person": Person, "ID_PaymentType": ID_PaymentType, "PaymentType": PaymentType, "BankAccount": BankAccount, "AccountPrefix": AccountPrefix, "AccountNumber": AccountNumber, "Bank": Bank})

    # Načíst seznam plateb
    def PaymentAll(self, ID_Login, ID_EnrollInvoice, Paired, DisplayName=None):
        return self._client.service.PaymentAll({"ID_Login": ID_Login, "ID_EnrollInvoice": ID_EnrollInvoice, "Paired": Paired, "DisplayName": DisplayName})

    # Načíst seznam plateb za fakturu
    def PaymentAllEnrollInvoice(self, ID_Login, ID_EnrollInvoice, DisplayName=None):
        return self._client.service.PaymentAllEnrollInvoice({"ID_Login": ID_Login, "ID_EnrollInvoice": ID_EnrollInvoice, "DisplayName": DisplayName})

    # Smazat platbu
    def PaymentDelete(self, ID_Login, ID):
        return self._client.service.PaymentDelete({"ID_Login": ID_Login, "ID": ID})

    # Načíst detail platby
    def PaymentDetail(self, ID_Login, ID):
        return self._client.service.PaymentDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit platbu
    def PaymentInsert(self, ID_Login, ID, ActualDate, IssueDate, Amount, ID_EnrollInvoice, DisplayName=None, VS=None, EnrollInvoice=None, NewAmount=None, AccountNumber=None, AccountPrefix=None, BankCode=None):
        return self._client.service.PaymentInsert({"ID_Login": ID_Login, "ID": ID, "ActualDate": ActualDate, "IssueDate": IssueDate, "Amount": Amount, "ID_EnrollInvoice": ID_EnrollInvoice, "DisplayName": DisplayName, "VS": VS, "EnrollInvoice": EnrollInvoice, "NewAmount": NewAmount, "AccountNumber": AccountNumber, "AccountPrefix": AccountPrefix, "BankCode": BankCode})

    # Smazat hovor
    def CallDeleteMonth(self, ID_Login, Month, Year, DeleteOnlyCall):
        return self._client.service.CallDeleteMonth({"ID_Login": ID_Login, "Month": Month, "Year": Year, "DeleteOnlyCall": DeleteOnlyCall})

    # Založit hovor
    def CallInsert(self, Call=None):
        return self._client.service.CallInsert({"Call": Call})

    # Načíst detail zobrazení osoby v adresáři
    def CatalogDisplayDetail(self, ID_Login, ID_Person):
        return self._client.service.CatalogDisplayDetail({"ID_Login": ID_Login, "ID_Person": ID_Person})

    # Upravit zobrazení osoby v adresáři
    def CatalogDisplayUpdate(self, ID_Login, ID, ID_Person, Birthday, YearFrom, Adress, PostalAdress, School, Function, Qualification, EducationSeminary, Offer, Education, Membership, Person=None):
        return self._client.service.CatalogDisplayUpdate({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "Birthday": Birthday, "YearFrom": YearFrom, "Adress": Adress, "PostalAdress": PostalAdress, "School": School, "Function": Function, "Qualification": Qualification, "EducationSeminary": EducationSeminary, "Offer": Offer, "Education": Education, "Membership": Membership, "Person": Person})

    # Načíst detail limitu pro vyhledávání osob v adresáři
    def CatalogLimitDetail(self, ID_Login, ID_Person):
        return self._client.service.CatalogLimitDetail({"ID_Login": ID_Login, "ID_Person": ID_Person})

    # Upravit limit pro vyhledávání osob v adresáři
    def CatalogLimitUpdate(self, ID_Login, ID_Person, OnlyWeek):
        return self._client.service.CatalogLimitUpdate({"ID_Login": ID_Login, "ID_Person": ID_Person, "OnlyWeek": OnlyWeek})

    # Načíst seznam faktur za STS
    def EnrollInvoiceAll(self, ID_Login, ID_Enroll, ID_PersonCreate, ID_PersonRecipient, Price, DateCreateFrom, DateCreateTo, DateFromMonth, DateFromYear, Pairing, Reinvoice, MinReminderCount, OnlyPerson, DisplayName=None, ID_EnrollInvoiceState=None, EnrollNumber=None, FirstName=None, LastName=None, NickName=None, Unit=None, RegistrationNumber=None):
        return self._client.service.EnrollInvoiceAll({"ID_Login": ID_Login, "ID_Enroll": ID_Enroll, "ID_PersonCreate": ID_PersonCreate, "ID_PersonRecipient": ID_PersonRecipient, "Price": Price, "DateCreateFrom": DateCreateFrom, "DateCreateTo": DateCreateTo, "DateFromMonth": DateFromMonth, "DateFromYear": DateFromYear, "Pairing": Pairing, "Reinvoice": Reinvoice, "MinReminderCount": MinReminderCount, "OnlyPerson": OnlyPerson, "DisplayName": DisplayName, "ID_EnrollInvoiceState": ID_EnrollInvoiceState, "EnrollNumber": EnrollNumber, "FirstName": FirstName, "LastName": LastName, "NickName": NickName, "Unit": Unit, "RegistrationNumber": RegistrationNumber})

    # Načíst seznam položek faktury
    def EnrollInvoiceItemAll(self, ID_Login, ID_EnrollInvoice, ID_EnrollNumber, IsExport, DisplayName=None, ID_EnrollInvoiceItemType=None):
        return self._client.service.EnrollInvoiceItemAll({"ID_Login": ID_Login, "ID_EnrollInvoice": ID_EnrollInvoice, "ID_EnrollNumber": ID_EnrollNumber, "IsExport": IsExport, "DisplayName": DisplayName, "ID_EnrollInvoiceItemType": ID_EnrollInvoiceItemType})

    # Smazat položku faktury
    def EnrollInvoiceItemDelete(self, ID_Login, ID):
        return self._client.service.EnrollInvoiceItemDelete({"ID_Login": ID_Login, "ID": ID})

    # Načíst detail položky faktury
    def EnrollInvoiceItemDetail(self, ID_Login, ID):
        return self._client.service.EnrollInvoiceItemDetail({"ID_Login": ID_Login, "ID": ID})

    # Založit položky faktury
    def EnrollInvoiceItemInsert(self, ID_Login, ID, ID_EnrollInvoice, ID_EnrollNumber, Amount, Price, IsCustom, IsService, InvoiceDateFrom, InvoiceDateTo, IsCallDeleted, DateCreate, ID_VatRate, PriceWithVat, ID_Document, EnrollInvoice=None, DisplayName=None, EnrollNumber=None, ID_EnrollInvoiceItemType=None, EnrollInvoiceItemType=None, HolderName=None, VatRate=None):
        return self._client.service.EnrollInvoiceItemInsert({"ID_Login": ID_Login, "ID": ID, "ID_EnrollInvoice": ID_EnrollInvoice, "ID_EnrollNumber": ID_EnrollNumber, "Amount": Amount, "Price": Price, "IsCustom": IsCustom, "IsService": IsService, "InvoiceDateFrom": InvoiceDateFrom, "InvoiceDateTo": InvoiceDateTo, "IsCallDeleted": IsCallDeleted, "DateCreate": DateCreate, "ID_VatRate": ID_VatRate, "PriceWithVat": PriceWithVat, "ID_Document": ID_Document, "EnrollInvoice": EnrollInvoice, "DisplayName": DisplayName, "EnrollNumber": EnrollNumber, "ID_EnrollInvoiceItemType": ID_EnrollInvoiceItemType, "EnrollInvoiceItemType": EnrollInvoiceItemType, "HolderName": HolderName, "VatRate": VatRate})

    # Založit automaticky položky faktur z vyúčtování
    def EnrollInvoiceItemInsertCall(self, ID_Login, ID, ID_EnrollInvoice, ID_EnrollNumber, Amount, Price, IsCustom, IsService, InvoiceDateFrom, InvoiceDateTo, IsCallDeleted, DateCreate, ID_VatRate, PriceWithVat, ID_Document, EnrollInvoice=None, DisplayName=None, EnrollNumber=None, ID_EnrollInvoiceItemType=None, EnrollInvoiceItemType=None, HolderName=None, VatRate=None):
        return self._client.service.EnrollInvoiceItemInsertCall({"ID_Login": ID_Login, "ID": ID, "ID_EnrollInvoice": ID_EnrollInvoice, "ID_EnrollNumber": ID_EnrollNumber, "Amount": Amount, "Price": Price, "IsCustom": IsCustom, "IsService": IsService, "InvoiceDateFrom": InvoiceDateFrom, "InvoiceDateTo": InvoiceDateTo, "IsCallDeleted": IsCallDeleted, "DateCreate": DateCreate, "ID_VatRate": ID_VatRate, "PriceWithVat": PriceWithVat, "ID_Document": ID_Document, "EnrollInvoice": EnrollInvoice, "DisplayName": DisplayName, "EnrollNumber": EnrollNumber, "ID_EnrollInvoiceItemType": ID_EnrollInvoiceItemType, "EnrollInvoiceItemType": EnrollInvoiceItemType, "HolderName": HolderName, "VatRate": VatRate})

    # Upravit položku faktury
    def EnrollInvoiceItemUpdate(self, ID_Login, ID, ID_EnrollInvoice, ID_EnrollNumber, Amount, Price, IsCustom, IsService, InvoiceDateFrom, InvoiceDateTo, IsCallDeleted, DateCreate, ID_VatRate, PriceWithVat, ID_Document, EnrollInvoice=None, DisplayName=None, EnrollNumber=None, ID_EnrollInvoiceItemType=None, EnrollInvoiceItemType=None, HolderName=None, VatRate=None):
        return self._client.service.EnrollInvoiceItemUpdate({"ID_Login": ID_Login, "ID": ID, "ID_EnrollInvoice": ID_EnrollInvoice, "ID_EnrollNumber": ID_EnrollNumber, "Amount": Amount, "Price": Price, "IsCustom": IsCustom, "IsService": IsService, "InvoiceDateFrom": InvoiceDateFrom, "InvoiceDateTo": InvoiceDateTo, "IsCallDeleted": IsCallDeleted, "DateCreate": DateCreate, "ID_VatRate": ID_VatRate, "PriceWithVat": PriceWithVat, "ID_Document": ID_Document, "EnrollInvoice": EnrollInvoice, "DisplayName": DisplayName, "EnrollNumber": EnrollNumber, "ID_EnrollInvoiceItemType": ID_EnrollInvoiceItemType, "EnrollInvoiceItemType": EnrollInvoiceItemType, "HolderName": HolderName, "VatRate": VatRate})

    # Načíst seznam stavů faktur za STS
    def EnrollInvoiceStateAll(self, ID_Login, DisplayName=None):
        return self._client.service.EnrollInvoiceStateAll({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Seznam fakturačních období
    def EnrollInvoiceSummary(self, ID_Login):
        return self._client.service.EnrollInvoiceSummary({"ID_Login": ID_Login})

    # Upravit fakturu za STS
    def EnrollInvoiceUpdatePrepared(self, ID_Login, ID_Unit):
        return self._client.service.EnrollInvoiceUpdatePrepared({"ID_Login": ID_Login, "ID_Unit": ID_Unit})

    # Aktivování čísel podle vyúčtování
    def EnrollNumberUpdateActive(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateActive({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Majitel obdržel novou SIM kartu
    def EnrollNumberUpdateUnblocked(self, ID_Login, ID, ID_Person, ID_Enroll, ID_UserCreate, DateCreate, IsFirst, DateDecision, ID_PersonDecision, IsFixedTariff, IsValid, ID_Tariff, ID_TariffData, ID_RoamingTariff, DateConversion, ID_Unit, Agrees, ID_PersonCreate, OnlyValidate, WizardStep, IsHIT, IsUnit, ID_EnrollNumberChange, ID_EnrollNumberPaired, ID_HolderRelation, DateFup, ValidTo, ID_RequestBlocking, ID_RequestRenewal, ID_PersonAgent, ID_InvoiceGroup, ID_TariffPaired, ID_TariffDataPaired, CanRenewal, ID_TariffServiceForeign, ForeignValidFrom, ID_EnrollNumberLast, ID_FupType, TariffDataFupDisabled, ID_TariffDataIncluded, Person=None, PersonCivil=None, IdentificationCode=None, DisplayName=None, ID_EnrollNumberState=None, EnrollNumberState=None, StateDecision=None, PersonDecision=None, ID_Operator=None, Operator=None, SIM=None, Tariff=None, TariffData=None, TariffDataCode=None, ID_RoamingType=None, RoamingType=None, RoamingTariff=None, BlockingPassword=None, ID_TariffServiceArray=None, TariffServiceValidFromArray=None, Unit=None, RegistrationNumber=None, PersonCreate=None, FirstLine=None, Street=None, City=None, Postcode=None, State=None, Email=None, Phone=None, TariffCode=None, RoamingTariffCode=None, TariffService=None, TariffServiceNote=None, ID_TariffType=None, EnrollNumberChange=None, EnrollNumberPaired=None, KPC=None, CVOP=None, ScanTransferExtension=None, ScanTransferContent=None, PostalName=None, PostalStreet=None, PostalCity=None, PostalPostcode=None, PostalState=None, PostalPhone=None, PostalEmail=None, HolderName=None, HolderRelation=None, PersonAgent=None, InvoiceGroupNumber=None, Contractor=None, ContractorIC=None, ContractorDIC=None, ContractorAddress=None, TariffPaired=None, ID_TariffServicePairedArray=None, TariffServiceForeign=None, TariffDataIncluded=None):
        return self._client.service.EnrollNumberUpdateUnblocked({"ID_Login": ID_Login, "ID": ID, "ID_Person": ID_Person, "ID_Enroll": ID_Enroll, "ID_UserCreate": ID_UserCreate, "DateCreate": DateCreate, "IsFirst": IsFirst, "DateDecision": DateDecision, "ID_PersonDecision": ID_PersonDecision, "IsFixedTariff": IsFixedTariff, "IsValid": IsValid, "ID_Tariff": ID_Tariff, "ID_TariffData": ID_TariffData, "ID_RoamingTariff": ID_RoamingTariff, "DateConversion": DateConversion, "ID_Unit": ID_Unit, "Agrees": Agrees, "ID_PersonCreate": ID_PersonCreate, "OnlyValidate": OnlyValidate, "WizardStep": WizardStep, "IsHIT": IsHIT, "IsUnit": IsUnit, "ID_EnrollNumberChange": ID_EnrollNumberChange, "ID_EnrollNumberPaired": ID_EnrollNumberPaired, "ID_HolderRelation": ID_HolderRelation, "DateFup": DateFup, "ValidTo": ValidTo, "ID_RequestBlocking": ID_RequestBlocking, "ID_RequestRenewal": ID_RequestRenewal, "ID_PersonAgent": ID_PersonAgent, "ID_InvoiceGroup": ID_InvoiceGroup, "ID_TariffPaired": ID_TariffPaired, "ID_TariffDataPaired": ID_TariffDataPaired, "CanRenewal": CanRenewal, "ID_TariffServiceForeign": ID_TariffServiceForeign, "ForeignValidFrom": ForeignValidFrom, "ID_EnrollNumberLast": ID_EnrollNumberLast, "ID_FupType": ID_FupType, "TariffDataFupDisabled": TariffDataFupDisabled, "ID_TariffDataIncluded": ID_TariffDataIncluded, "Person": Person, "PersonCivil": PersonCivil, "IdentificationCode": IdentificationCode, "DisplayName": DisplayName, "ID_EnrollNumberState": ID_EnrollNumberState, "EnrollNumberState": EnrollNumberState, "StateDecision": StateDecision, "PersonDecision": PersonDecision, "ID_Operator": ID_Operator, "Operator": Operator, "SIM": SIM, "Tariff": Tariff, "TariffData": TariffData, "TariffDataCode": TariffDataCode, "ID_RoamingType": ID_RoamingType, "RoamingType": RoamingType, "RoamingTariff": RoamingTariff, "BlockingPassword": BlockingPassword, "ID_TariffServiceArray": ID_TariffServiceArray, "TariffServiceValidFromArray": TariffServiceValidFromArray, "Unit": Unit, "RegistrationNumber": RegistrationNumber, "PersonCreate": PersonCreate, "FirstLine": FirstLine, "Street": Street, "City": City, "Postcode": Postcode, "State": State, "Email": Email, "Phone": Phone, "TariffCode": TariffCode, "RoamingTariffCode": RoamingTariffCode, "TariffService": TariffService, "TariffServiceNote": TariffServiceNote, "ID_TariffType": ID_TariffType, "EnrollNumberChange": EnrollNumberChange, "EnrollNumberPaired": EnrollNumberPaired, "KPC": KPC, "CVOP": CVOP, "ScanTransferExtension": ScanTransferExtension, "ScanTransferContent": ScanTransferContent, "PostalName": PostalName, "PostalStreet": PostalStreet, "PostalCity": PostalCity, "PostalPostcode": PostalPostcode, "PostalState": PostalState, "PostalPhone": PostalPhone, "PostalEmail": PostalEmail, "HolderName": HolderName, "HolderRelation": HolderRelation, "PersonAgent": PersonAgent, "InvoiceGroupNumber": InvoiceGroupNumber, "Contractor": Contractor, "ContractorIC": ContractorIC, "ContractorDIC": ContractorDIC, "ContractorAddress": ContractorAddress, "TariffPaired": TariffPaired, "ID_TariffServicePairedArray": ID_TariffServicePairedArray, "TariffServiceForeign": TariffServiceForeign, "TariffDataIncluded": TariffDataIncluded})

    # Načíst seznam volných jednotek
    def FreeCallUnitAll(self, ID_Login, ID_EnrollInvoiceItem):
        return self._client.service.FreeCallUnitAll({"ID_Login": ID_Login, "ID_EnrollInvoiceItem": ID_EnrollInvoiceItem})

    # Smazat volné jednotky
    def FreeCallUnitDeleteDate(self, ID_Login, Month, Year):
        return self._client.service.FreeCallUnitDeleteDate({"ID_Login": ID_Login, "Month": Month, "Year": Year})

    # Založit volné jednotky
    def FreeCallUnitInsert(self, FreeCallUnit=None):
        return self._client.service.FreeCallUnitInsert({"FreeCallUnit": FreeCallUnit})

    # Načíst seznam platebních příkazů
    def PaymentOrderAll(self, ID_Login, Downloaded):
        return self._client.service.PaymentOrderAll({"ID_Login": ID_Login, "Downloaded": Downloaded})

    # Načíst detail platebního příkazu
    def PaymentOrderDetail(self, ID_Login, ID):
        return self._client.service.PaymentOrderDetail({"ID_Login": ID_Login, "ID": ID})

    # Načíst seznam způsobů platby
    def PaymentTypeAll(self, ID_Login, DisplayName=None):
        return self._client.service.PaymentTypeAll({"ID_Login": ID_Login, "DisplayName": DisplayName})

    # Upravit platbu
    def PaymentUpdate(self, ID_Login, ID, ActualDate, IssueDate, Amount, ID_EnrollInvoice, DisplayName=None, VS=None, EnrollInvoice=None, NewAmount=None, AccountNumber=None, AccountPrefix=None, BankCode=None):
        return self._client.service.PaymentUpdate({"ID_Login": ID_Login, "ID": ID, "ActualDate": ActualDate, "IssueDate": IssueDate, "Amount": Amount, "ID_EnrollInvoice": ID_EnrollInvoice, "DisplayName": DisplayName, "VS": VS, "EnrollInvoice": EnrollInvoice, "NewAmount": NewAmount, "AccountNumber": AccountNumber, "AccountPrefix": AccountPrefix, "BankCode": BankCode})

    # Rozdělit platbu
    def PaymentUpdateSplit(self, ID_Login, ID, ActualDate, IssueDate, Amount, ID_EnrollInvoice, DisplayName=None, VS=None, EnrollInvoice=None, NewAmount=None, AccountNumber=None, AccountPrefix=None, BankCode=None):
        return self._client.service.PaymentUpdateSplit({"ID_Login": ID_Login, "ID": ID, "ActualDate": ActualDate, "IssueDate": IssueDate, "Amount": Amount, "ID_EnrollInvoice": ID_EnrollInvoice, "DisplayName": DisplayName, "VS": VS, "EnrollInvoice": EnrollInvoice, "NewAmount": NewAmount, "AccountNumber": AccountNumber, "AccountPrefix": AccountPrefix, "BankCode": BankCode})

    # Načíst seznam hromadných žádostí na prodloužení smlouvy
    def RequestBatchAll(self, ID_Login, ID, IsSent):
        return self._client.service.RequestBatchAll({"ID_Login": ID_Login, "ID": ID, "IsSent": IsSent})

    # Načíst detail hromadné žádosti na prodloužení smlouvy
    def RequestBatchDetail(self, ID_Login, ID):
        return self._client.service.RequestBatchDetail({"ID_Login": ID_Login, "ID": ID})

    # Načíst vygenerované pdf hromadné žádosti
    def RequestBatchDownloadPdf(self, ID_Login, ID):
        return self._client.service.RequestBatchDownloadPdf({"ID_Login": ID_Login, "ID": ID})

    # Odeslat hromadnou žádost na T-Mobile
    def RequestBatchUpdateSend(self, ID_Login, ID):
        return self._client.service.RequestBatchUpdateSend({"ID_Login": ID_Login, "ID": ID})

